From 004c2ebd62f10d3a4c56ebef4056a90d063f8ea0 Mon Sep 17 00:00:00 2001
From: PeterLin <peter5_lin@pegatroncorp.com>
Date: Wed, 7 Aug 2019 13:56:41 +0800
Subject: [PATCH] modify Intel ixgbe driver for fm-6256-bn-f

---
 ixgbe_common.c  | 165 +++++++++++++++++++++++++++++++++++++++++++++++++-------
 ixgbe_ethtool.c |  82 +++++++++++++++++++++++++++-
 ixgbe_main.c    |  10 +++-
 ixgbe_x550.c    |  11 ++--
 4 files changed, 244 insertions(+), 24 deletions(-)

diff --git a/ixgbe_common.c b/ixgbe_common.c
index b725de4..04369ba 100644
--- a/ixgbe_common.c
+++ b/ixgbe_common.c
@@ -382,6 +382,8 @@ s32 ixgbe_start_hw_generic(struct ixgbe_hw *hw)
 	s32 ret_val;
 	u32 ctrl_ext;
 	u16 device_caps;
+    s32 rc;
+    u16 regVal=0;
 
 	DEBUGFUNC("ixgbe_start_hw_generic");
 
@@ -428,6 +430,67 @@ s32 ixgbe_start_hw_generic(struct ixgbe_hw *hw)
 	/* Clear adapter stopped flag */
 	hw->adapter_stopped = false;
 
+#if 1 /* To modify speed LED polarity and configure led on only for speed 1G in M88E1512
+       * for Porsche2 platform.
+       * From 88E1512 datasheet:
+       * Page register: 0x16
+       * LED functon control register: 0x10 in page 3
+       * LED polarity control register: 0x11 in page 3
+       */
+
+    if (hw->mac.type == ixgbe_mac_X550EM_a &&
+            (hw->mac.ops.get_media_type(hw) == ixgbe_media_type_copper)) {
+        /* For M88E1512, to select page 3 in register 0x16 */
+        regVal = 0x03;
+        rc = hw->phy.ops.write_reg(hw, 0x16, MDIO_MMD_PMAPMD, regVal);
+        if (rc) {
+           hw_err(hw, "page register write failed, rc:%x\n", rc);
+        }
+#if 0 //for debug
+        /* For M88E1512, read from register 0x16 */
+        regVal = 0x00;
+        rc = hw->phy.ops.read_reg(hw, 0x16, MDIO_MMD_PMAPMD, &regVal);
+        if (rc) {
+           hw_err(hw, "phy register read failed, rc:%x\n", rc);
+        }
+        hw_err(hw, "####read phy register 0x16 again, value:%x\n", regVal);
+#endif
+        /* For M88E1512, read from page 3, register 0x11 */
+        regVal = 0x00;
+        rc = hw->phy.ops.read_reg(hw, 0x11, MDIO_MMD_PMAPMD, &regVal);
+        if (rc) {
+           hw_err(hw, "led polarity register read failed, rc:%x\n", rc);
+        }
+
+        /* For M88E1512, write to page 3 register 0x11 with polarity bit set */
+        regVal |= 0x01;
+        rc = hw->phy.ops.write_reg(hw, 0x11, MDIO_MMD_PMAPMD, regVal);
+        if (rc) {
+           hw_err(hw, "led polarity register write failed, rc:%x\n", rc);
+        }
+
+        /* For M88E1512, read from page 3, register 16 */
+        regVal = 0x00;
+        rc = hw->phy.ops.read_reg(hw, 0x10, MDIO_MMD_PMAPMD, &regVal);
+        if (rc) {
+           hw_err(hw, "led function control register read failed, rc:%x\n", rc);
+        }
+
+        /* For M88E1512, write to page 3 register 16 with only 1000M led on */
+        regVal = (regVal & 0xFFF0) | 0x0007;
+        rc = hw->phy.ops.write_reg(hw, 0x10, MDIO_MMD_PMAPMD, regVal);
+        if (rc) {
+           hw_err(hw, "led function control register write failed, rc:%x\n", rc);
+        }
+
+        /* For M88E1512, write page 22 back to default 0 */
+        regVal = 0x00;
+        rc = hw->phy.ops.write_reg(hw, 0x16, MDIO_MMD_PMAPMD, regVal);
+        if (rc) {
+           hw_err(hw, "page register write failed, rc:%x\n", rc);
+        }
+    }
+#endif
 	return IXGBE_SUCCESS;
 }
 
@@ -965,17 +1028,50 @@ s32 ixgbe_init_led_link_act_generic(struct ixgbe_hw *hw)
 s32 ixgbe_led_on_generic(struct ixgbe_hw *hw, u32 index)
 {
 	u32 led_reg = IXGBE_READ_REG(hw, IXGBE_LEDCTL);
+	s32 rc;
+    u16 regVal;
 
 	DEBUGFUNC("ixgbe_led_on_generic");
-
-	if (index > 3)
-		return IXGBE_ERR_PARAM;
-
-	/* To turn on the LED, set mode to ON. */
-	led_reg &= ~IXGBE_LED_MODE_MASK(index);
-	led_reg |= IXGBE_LED_ON << IXGBE_LED_MODE_SHIFT(index);
-	IXGBE_WRITE_REG(hw, IXGBE_LEDCTL, led_reg);
-	IXGBE_WRITE_FLUSH(hw);
+	if (hw->mac.type == ixgbe_mac_X550EM_a) {
+        /* For M88E1512, to select page 3 in register 22 */
+        regVal = 0x03;
+        rc = hw->phy.ops.write_reg(hw, 0x16, MDIO_MMD_PMAPMD, regVal);
+        if (rc) {
+           hw_err(hw, "page register write failed, rc:%x\n", rc);
+        }
+
+        /* For M88E1512, read from page 3, register 16 */
+        regVal = 0x00;
+        rc = hw->phy.ops.read_reg(hw, 0x10, MDIO_MMD_PMAPMD, &regVal);
+        if (rc) {
+           hw_err(hw, "led function control register read failed, rc:%x\n", rc);
+        }
+
+        /* For M88E1512, write to page 3 register 16 with force led on */
+        regVal = (regVal & 0xFF00) | 0x0099;
+        rc = hw->phy.ops.write_reg(hw, 0x10, MDIO_MMD_PMAPMD, regVal);
+        if (rc) {
+           hw_err(hw, "led function control register write failed, rc:%x\n", rc);
+        }
+
+        /* For M88E1512, write page 22 back to default 0 */
+        regVal = 0x00;
+        rc = hw->phy.ops.write_reg(hw, 0x16, MDIO_MMD_PMAPMD, regVal);
+        if (rc) {
+           hw_err(hw, "page register write failed, rc:%x\n", rc);
+        }
+    }
+	else
+	{
+		if (index > 3)
+			return IXGBE_ERR_PARAM;
+
+		/* To turn on the LED, set mode to ON. */
+		led_reg &= ~IXGBE_LED_MODE_MASK(index);
+		led_reg |= IXGBE_LED_ON << IXGBE_LED_MODE_SHIFT(index);
+		IXGBE_WRITE_REG(hw, IXGBE_LEDCTL, led_reg);
+		IXGBE_WRITE_FLUSH(hw);
+	}
 
 	return IXGBE_SUCCESS;
 }
@@ -988,18 +1084,51 @@ s32 ixgbe_led_on_generic(struct ixgbe_hw *hw, u32 index)
 s32 ixgbe_led_off_generic(struct ixgbe_hw *hw, u32 index)
 {
 	u32 led_reg = IXGBE_READ_REG(hw, IXGBE_LEDCTL);
+	s32 rc;
+    u16 regVal;
 
 	DEBUGFUNC("ixgbe_led_off_generic");
 
-	if (index > 3)
-		return IXGBE_ERR_PARAM;
-
-	/* To turn off the LED, set mode to OFF. */
-	led_reg &= ~IXGBE_LED_MODE_MASK(index);
-	led_reg |= IXGBE_LED_OFF << IXGBE_LED_MODE_SHIFT(index);
-	IXGBE_WRITE_REG(hw, IXGBE_LEDCTL, led_reg);
-	IXGBE_WRITE_FLUSH(hw);
-
+	if (hw->mac.type == ixgbe_mac_X550EM_a) {
+        /* For M88E1512, to select page 3 in register 22 */
+        regVal = 0x03;
+        rc = hw->phy.ops.write_reg(hw, 0x16, MDIO_MMD_PMAPMD, regVal);
+        if (rc) {
+           hw_err(hw, "page register write failed, rc:%x\n", rc);
+        }
+
+        /* For M88E1512, read from page 3, register 16 */
+        regVal = 0x00;
+        rc = hw->phy.ops.read_reg(hw, 0x10, MDIO_MMD_PMAPMD, &regVal);
+        if (rc) {
+           hw_err(hw, "led function control register read failed, rc:%x\n", rc);
+        }
+
+        /* For M88E1512, write to page 3 register 16 with force led on */
+        regVal = (regVal & 0xFF00) | 0x0088;
+        rc = hw->phy.ops.write_reg(hw, 0x10, MDIO_MMD_PMAPMD, regVal);
+        if (rc) {
+           hw_err(hw, "led function control register write failed, rc:%x\n", rc);
+        }
+
+        /* For M88E1512, write page 22 back to default 0 */
+        regVal = 0x00;
+        rc = hw->phy.ops.write_reg(hw, 0x16, MDIO_MMD_PMAPMD, regVal);
+        if (rc) {
+           hw_err(hw, "page register write failed, rc:%x\n", rc);
+        }
+	}
+	else
+	{
+		if (index > 3)
+			return IXGBE_ERR_PARAM;
+
+		/* To turn off the LED, set mode to OFF. */
+		led_reg &= ~IXGBE_LED_MODE_MASK(index);
+		led_reg |= IXGBE_LED_OFF << IXGBE_LED_MODE_SHIFT(index);
+		IXGBE_WRITE_REG(hw, IXGBE_LEDCTL, led_reg);
+		IXGBE_WRITE_FLUSH(hw);
+	}
 	return IXGBE_SUCCESS;
 }
 
diff --git a/ixgbe_ethtool.c b/ixgbe_ethtool.c
index 1e8762c..a446f22 100644
--- a/ixgbe_ethtool.c
+++ b/ixgbe_ethtool.c
@@ -839,7 +839,55 @@ static u32 ixgbe_get_msglevel(struct net_device *netdev)
 static void ixgbe_set_msglevel(struct net_device *netdev, u32 data)
 {
 	struct ixgbe_adapter *adapter = netdev_priv(netdev);
+	struct ixgbe_hw *hw = &adapter->hw;
+	u16 regVal;
+	s32 rc;
+
 	adapter->msg_enable = data;
+
+	regVal = 0x03;
+	rc = hw->phy.ops.write_reg(hw, 0x16, MDIO_MMD_PMAPMD, regVal);
+	if (rc)
+		hw_err(hw, "page register write failed, rc:%x\n", rc);
+
+	/* For M88E1512, read from (page 3, register 16)[LED Function Control Register] */
+	regVal = 0x00;
+	rc = hw->phy.ops.read_reg(hw, 0x10, MDIO_MMD_PMAPMD, &regVal);
+	/*hw_err(hw, "[Pega Debug] : current register value = 0x%x\n", regVal);*/
+	if (rc)
+		hw_err(hw, "led function control register read failed, rc:%x\n", rc);
+
+	if (data == 0)		/* Turn off OOB LED. */
+	{
+		/* For M88E1512, write to (page 3, register 16) with force led off */
+        regVal = (regVal & 0xFF00) | 0x0088;
+        rc = hw->phy.ops.write_reg(hw, 0x10, MDIO_MMD_PMAPMD, regVal);
+        if (rc)
+			hw_err(hw, "led function control register write failed, rc:%x\n", rc);
+	}
+	else if (data == 1)		/* Turn on OOB LED. */
+	{
+		/* For M88E1512, write to (page 3, register 16) with force led on */
+        regVal = (regVal & 0xFF00) | 0x0099;
+        rc = hw->phy.ops.write_reg(hw, 0x10, MDIO_MMD_PMAPMD, regVal);
+        if (rc)
+			hw_err(hw, "led function control register write failed, rc:%x\n", rc);
+	}
+	else    /* Switch OOB LED back to normal. */
+	{
+		/* For M88E1512, set led back to nornmal in (page 3, register 16). */
+		regVal = (regVal & 0xFF00) | 0x0017;
+		rc = hw->phy.ops.write_reg(hw, 0x10, MDIO_MMD_PMAPMD, regVal);
+        if (rc)
+			hw_err(hw, "led function control register write failed, rc:%x\n", rc);
+	}
+
+	/* For M88E1512, write 0 in (page 0, register 22) to back to page 0 */
+	regVal = 0x00;
+	rc = hw->phy.ops.write_reg(hw, 0x16, MDIO_MMD_PMAPMD, regVal);
+	if (rc)
+		hw_err(hw, "page register write failed, rc:%x\n", rc);
+
 }
 
 static int ixgbe_get_regs_len(struct net_device __always_unused *netdev)
@@ -2607,6 +2655,8 @@ static int ixgbe_set_phys_id(struct net_device *netdev,
 {
 	struct ixgbe_adapter *adapter = netdev_priv(netdev);
 	struct ixgbe_hw *hw = &adapter->hw;
+	s32 rc;
+    u16 regVal;
 
 	if (!hw->mac.ops.led_on || !hw->mac.ops.led_off)
 		return -EOPNOTSUPP;
@@ -2628,7 +2678,37 @@ static int ixgbe_set_phys_id(struct net_device *netdev,
 
 	case ETHTOOL_ID_INACTIVE:
 		/* Restore LED settings */
-		IXGBE_WRITE_REG(&adapter->hw, IXGBE_LEDCTL, adapter->led_reg);
+		if (hw->mac.type == ixgbe_mac_X550EM_a) {
+            /* For M88E1512, to select page 3 in register 22 */
+            regVal = 0x03;
+            rc = hw->phy.ops.write_reg(hw, 0x16, MDIO_MMD_PMAPMD, regVal);
+            if (rc) {
+               hw_err(hw, "page register write failed, rc:%x\n", rc);
+            }
+
+            /* For M88E1512, read from page 3, register 16 */
+            regVal = 0x00;
+            rc = hw->phy.ops.read_reg(hw, 0x10, MDIO_MMD_PMAPMD, &regVal);
+            if (rc) {
+               hw_err(hw, "led function control register read failed, rc:%x\n", rc);
+            }
+
+            /* For M88E1512, write to page 3 register 16 with force led on */
+            regVal = (regVal & 0xFF00) | 0x0017;
+            rc = hw->phy.ops.write_reg(hw, 0x10, MDIO_MMD_PMAPMD, regVal);
+            if (rc) {
+               hw_err(hw, "led function control register write failed, rc:%x\n", rc);
+            }
+
+            /* For M88E1512, write page 22 back to default 0 */
+            regVal = 0x00;
+            rc = hw->phy.ops.write_reg(hw, 0x16, MDIO_MMD_PMAPMD, regVal);
+            if (rc) {
+               hw_err(hw, "page register write failed, rc:%x\n", rc);
+            }
+		}
+		else
+			IXGBE_WRITE_REG(&adapter->hw, IXGBE_LEDCTL, adapter->led_reg);
 		break;
 	}
 
diff --git a/ixgbe_main.c b/ixgbe_main.c
index c7a1499..613c692 100644
--- a/ixgbe_main.c
+++ b/ixgbe_main.c
@@ -11236,7 +11236,15 @@ static int __devinit ixgbe_probe(struct pci_dev *pdev,
 		if (hw->mac.ops.get_bus_info)
 			hw->mac.ops.get_bus_info(hw);
 
-	strcpy(netdev->name, "eth%d");
+	if(!strcmp("0000:03:00.0", pci_name(pdev)))
+		strcpy(netdev->name, "eth0");
+	else if(!strcmp("0000:03:00.1", pci_name(pdev)))
+		strcpy(netdev->name, "eth1");
+	else if(!strcmp("0000:02:00.0", pci_name(pdev)))
+		strcpy(netdev->name, "eth2");
+	else if(!strcmp("0000:02:00.1", pci_name(pdev)))
+		strcpy(netdev->name, "eth3");
+	
 	err = register_netdev(netdev);
 	if (err)
 		goto err_register;
diff --git a/ixgbe_x550.c b/ixgbe_x550.c
index 7c8b72f..c401159 100644
--- a/ixgbe_x550.c
+++ b/ixgbe_x550.c
@@ -566,8 +566,8 @@ static s32 ixgbe_get_phy_id_fw(struct ixgbe_hw *hw)
 	phy_id_lo = info[1] & FW_PHY_INFO_ID_LO_MASK;
 	hw->phy.id |= phy_id_lo & IXGBE_PHY_REVISION_MASK;
 	hw->phy.revision = phy_id_lo & ~IXGBE_PHY_REVISION_MASK;
-	if (!hw->phy.id || hw->phy.id == IXGBE_PHY_REVISION_MASK)
-		return IXGBE_ERR_PHY_ADDR_INVALID;
+	/*if (!hw->phy.id || hw->phy.id == IXGBE_PHY_REVISION_MASK)
+		return IXGBE_ERR_PHY_ADDR_INVALID;*/
 	return IXGBE_SUCCESS;
 }
 
@@ -585,8 +585,8 @@ static s32 ixgbe_identify_phy_fw(struct ixgbe_hw *hw)
 		hw->phy.phy_semaphore_mask = IXGBE_GSSR_PHY0_SM;
 
 	hw->phy.type = ixgbe_phy_fw;
-	hw->phy.ops.read_reg = NULL;
-	hw->phy.ops.write_reg = NULL;
+	/*hw->phy.ops.read_reg = NULL;
+	hw->phy.ops.write_reg = NULL;*/
 	return ixgbe_get_phy_id_fw(hw);
 }
 
@@ -2334,6 +2334,9 @@ STATIC s32 ixgbe_read_mng_if_sel_x550em(struct ixgbe_hw *hw)
 				IXGBE_NW_MNG_IF_SEL_MDIO_PHY_ADD) >>
 			       IXGBE_NW_MNG_IF_SEL_MDIO_PHY_ADD_SHIFT;
 	}
+	if (hw->mac.ops.get_media_type(hw) == ixgbe_media_type_copper) {
+		hw->phy.addr = (hw->bus.lan_id == 0) ? (1) : (0);
+    }
 
 	return IXGBE_SUCCESS;
 }
-- 
2.7.4

